// Un arbol binario de busqueda que acepta valores repetidos puede ser implementado usando nodos
nodo:
    campo key;
    int repetidos; // n´umero repetidos
    nodo* izq; //puntero al nodo hijo izquierdo
    nodo* der; //puntero al nodo hijo derecho
    nodo* padre; //puntero al nodo padre


// Escribir en pseudocodigo:
// • Un algoritmo que permita insertar un nodo en el arbol.
// • Un algoritmo que permita identificar el nodo con mas repetidos.
// • Un algoritmo recursivo para encontrar el minimo.
// • Un algoritmo que reporte todos los elementos ordenados, es decir, si se tiene el conjunto de datos 2, 3, 4, 5, 6, 2, 3, 3, 5,
// se debe retornar 2, 2, 3, 3, 3, 4, 5, 5, 6

funcion insertar(nodo arbol, int key)
{
    if(arbol == NULL)
    {
        arbol = new nodo;
        arbol->key = key;
        arbol->repetidos = 1;
        arbol->izq = NULL;
        arbol->der = NULL;
        arbol->padre = NULL;
    }
    else if(key == arbol->key)
    {
        arbol->repetidos++;
    }
    else if(key < arbol->key)
    {
        insertar(arbol->izq, key);
    }
    else
    {
        insertar(arbol->der, key);
    }
}


funcion buscar_mas_repetidos(nodo arbol)
{
    if(arbol == NULL)
    {
        return NULL;
    }
    else
    {
        if(arbol->repetidos > arbol->izq->repetidos && arbol->repetidos > arbol->der->repetidos)
        {
            return arbol;
        }
        else if(arbol->izq->repetidos > arbol->der->repetidos)
        {
            return buscar_mas_repetidos(arbol->izq);
        }
        else
        {
            return buscar_mas_repetidos(arbol->der);
        }
    }
}


funcion buscar_minimo(nodo arbol)
{
    if(arbol == NULL)
    {
        return NULL;
    }
    else
    {
        if(arbol->izq == NULL)
        {
            return arbol;
        }
        else
        {
            return buscar_minimo(arbol->izq);
        }
    }
}

funcion reporte_ordenado(nodo arbol)
{
    if(arbol == NULL)
    {
        return;
    }
    else
    {
        reporte_ordenado(arbol->izq);
        reporte_ordenado(arbol->der);
        cout << arbol->key << " ";
    }
}


