/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package taller_s_gr_193.ejercicio1_S_GR;

import java.awt.Color;
import java.util.ArrayList;

import javax.swing.JOptionPane;

/**
 *
 * @author User
 */
public class Ventana extends javax.swing.JFrame {
    
    // Salas
    private Pelicula salas[][];
    // Historico
    private ArrayList<Pelicula> historico;
    // Indice pelicula
    private int indice;
    /**
     * Creates new form Ventana
     */
    public Ventana() {
        // Inicializar salas 4x4
        salas = new Pelicula[4][4];
        // Inicializar historico
        historico = new ArrayList<Pelicula>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setBackground(new java.awt.Color(0, 153, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton1.setText("(0,0)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 153, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton2.setText("(0,1)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 153, 0));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton3.setText("(0,2)");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 153, 0));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton4.setText("(0,3)");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(0, 153, 0));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton5.setText("(1,0)");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(0, 153, 0));
        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton6.setText("(1,1)");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(0, 153, 0));
        jButton7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton7.setText("(1,2)");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(0, 153, 0));
        jButton8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton8.setText("(1,3)");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(0, 153, 0));
        jButton9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton9.setText("(2,0)");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setBackground(new java.awt.Color(0, 153, 0));
        jButton10.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton10.setText("(2,1)");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setBackground(new java.awt.Color(0, 153, 0));
        jButton11.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton11.setText("(2,2)");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setBackground(new java.awt.Color(0, 153, 0));
        jButton12.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton12.setText("(2,3)");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setBackground(new java.awt.Color(0, 153, 0));
        jButton13.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton13.setText("(3,0)");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setBackground(new java.awt.Color(0, 153, 0));
        jButton14.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton14.setText("(3,1)");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setBackground(new java.awt.Color(0, 153, 0));
        jButton15.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton15.setText("(3,2)");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setBackground(new java.awt.Color(0, 153, 0));
        jButton16.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton16.setText("(3,3)");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton16)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton7)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton9)
                    .addComponent(jButton10)
                    .addComponent(jButton11)
                    .addComponent(jButton12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton13)
                    .addComponent(jButton14)
                    .addComponent(jButton15)
                    .addComponent(jButton16))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Salas", jPanel1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Historico", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
    jButton1: 00
    jButton2: 01
    jButton3: 02
    jButton4: 03
    jButton5: 10
    jButton6: 11
    jButton7: 12
    jButton8: 13
    jButton9: 20
    jButton10: 21
    jButton11: 22
    jButton12: 23
    jButton13: 30
    jButton14: 31
    jButton15: 32
    jButton16: 33
    */
    
    public void insertarPelicula(Pelicula pelicula) {
        switch (indice) {
            case 1:
                salas[0][0] = pelicula;
                jButton1.setBackground(new Color(204, 0, 0));
                break;
            case 2:
                salas[0][1] = pelicula;
                jButton2.setBackground(new Color(204, 0, 0));
                break;
            case 3:
                salas[0][2] = pelicula;
                jButton3.setBackground(new Color(204, 0, 0));
                break;
            case 4:
                salas[0][3] = pelicula;
                jButton4.setBackground(new Color(204, 0, 0));
                break;
            case 5:
                salas[1][0] = pelicula;
                jButton5.setBackground(new Color(204, 0, 0));
                break;
            case 6:
                salas[1][1] = pelicula;
                jButton6.setBackground(new Color(204, 0, 0));
                break;
            case 7:
                salas[1][2] = pelicula;
                jButton7.setBackground(new Color(204, 0, 0));
                break;
            case 8:
                salas[1][3] = pelicula;
                jButton8.setBackground(new Color(204, 0, 0));
                break;
            case 9:
                salas[2][0] = pelicula;
                jButton9.setBackground(new Color(204, 0, 0));
                break;
            case 10:
                salas[2][1] = pelicula;
                jButton10.setBackground(new Color(204, 0, 0));
                break;
            case 11:
                salas[2][2] = pelicula;
                jButton11.setBackground(new Color(204, 0, 0));
                break;
            case 12:
                salas[2][3] = pelicula;
                jButton12.setBackground(new Color(204, 0, 0));
                break;
            case 13:
                salas[3][0] = pelicula;
                jButton13.setBackground(new Color(204, 0, 0));
                break;
            case 14:
                salas[3][1] = pelicula;
                jButton14.setBackground(new Color(204, 0, 0));
                break;
            case 15:
                salas[3][2] = pelicula;
                jButton15.setBackground(new Color(204, 0, 0));
                break;
            case 16:
                salas[3][3] = pelicula;
                jButton16.setBackground(new Color(204, 0, 0));
                break;
            default:
                break;
        }
        indice = -1;
    }

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(salas[0][0] == null){
            // indice 
            indice = 1;
            // Nueva ventana de Ingresar
            Ingresar ingresar = new Ingresar(this);
            ingresar.setVisible(true);
        }
        else{
            // Mostrar un jOptionPane de decisión, preguntar si desea quitar la proyección
            Duracion tiempoTranscurrido = new Duracion().resta(salas[0][0].getHoraInicial());
            Duracion tiempoRestante = salas[0][0].getDuracion().resta(tiempoTranscurrido);
            if(tiempoRestante.getHoras() <= 0 && tiempoRestante.getMinutos() <= 0){
                JOptionPane.showMessageDialog(this, "La pelicula ha terminado hace " + tiempoTranscurrido.getHoras() + " horas y " + tiempoTranscurrido.getMinutos() + " minutos");
                // Anotar hora de finalización
                salas[0][0].setHoraFinal(new Duracion());
                // Enviar pelicula a historico
                historico.add(salas[0][0]);
                // Eliminar pelicula de la sala
                salas[0][0] = null;
                jButton1.setBackground(new Color(0, 153, 0));
            }
            else{
                int opcion = JOptionPane.showConfirmDialog(this, "La pelicula esta en proyección, restan " + tiempoRestante.getHoras() + " horas y " + tiempoRestante.getMinutos() + " minutos"+". ¿Desea quitar la proyección?", "Quitar proyección", JOptionPane.YES_NO_OPTION);
                if(opcion == JOptionPane.YES_OPTION){
                    // Anotar hora de finalización
                    salas[0][0].setHoraFinal(new Duracion());
                    // Enviar pelicula a historico
                    historico.add(salas[0][0]);
                    // Eliminar pelicula de la sala
                    salas[0][0] = null;
                    jButton1.setBackground(new Color(0, 153, 0));
                }
            } 
        }
        // Actualizar tabla de historico
        actualizarTablaHistorico();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(salas[0][1] == null){
            // indice 
            indice = 2;
            // Nueva ventana de Ingresar
            Ingresar ingresar = new Ingresar(this);
            ingresar.setVisible(true);
        }
        else{
            // Mostrar un jOptionPane de decisión, preguntar si desea quitar la proyección
            Duracion tiempoTranscurrido = new Duracion().resta(salas[0][1].getHoraInicial());
            Duracion tiempoRestante = salas[0][1].getDuracion().resta(tiempoTranscurrido);
            if(tiempoRestante.getHoras() <= 0 && tiempoRestante.getMinutos() <= 0){
                JOptionPane.showMessageDialog(this, "La pelicula ha terminado hace " + tiempoTranscurrido.getHoras() + " horas y " + tiempoTranscurrido.getMinutos() + " minutos");
                // Anotar hora de finalización
                salas[0][1].setHoraFinal(new Duracion());
                // Enviar pelicula a historico
                historico.add(salas[0][1]);
                // Eliminar pelicula de la sala
                salas[0][1] = null;
                jButton2.setBackground(new Color(0, 153, 0));
            }
            else{
                int opcion = JOptionPane.showConfirmDialog(this, "La pelicula esta en proyección, restan " + tiempoRestante.getHoras() + " horas y " + tiempoRestante.getMinutos() + " minutos"+". ¿Desea quitar la proyección?", "Quitar proyección", JOptionPane.YES_NO_OPTION);
                if(opcion == JOptionPane.YES_OPTION){
                    // Anotar hora de final
                    salas[0][1].setHoraFinal(new Duracion());
                    // Enviar pelicula a historico
                    historico.add(salas[0][1]);
                    // Eliminar pelicula de la sala
                    salas[0][1] = null;
                    jButton2.setBackground(new Color(0, 153, 0));
                }
            }
        }
        // Actualizar tabla de historico
        actualizarTablaHistorico();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(salas[0][2] == null){
            // indice 
            indice = 3;
            // Nueva ventana de Ingresar
            Ingresar ingresar = new Ingresar(this);
            ingresar.setVisible(true);
        }
        else{
            // Mostrar un jOptionPane de decisión, preguntar si desea quitar la proyección
            Duracion tiempoTranscurrido = new Duracion().resta(salas[0][2].getHoraInicial());
            Duracion tiempoRestante = salas[0][2].getDuracion().resta(tiempoTranscurrido);
            if(tiempoRestante.getHoras() <= 0 && tiempoRestante.getMinutos() <= 0){
                JOptionPane.showMessageDialog(this, "La pelicula ha terminado hace " + tiempoTranscurrido.getHoras() + " horas y " + tiempoTranscurrido.getMinutos() + " minutos");
                // Anotar hora de finalización
                salas[0][2].setHoraFinal(new Duracion());
                // Enviar pelicula a historico
                historico.add(salas[0][2]);
                // Eliminar pelicula de la sala
                salas[0][2] = null;
                jButton3.setBackground(new Color(0, 153, 0));
            }
            else{
                int opcion = JOptionPane.showConfirmDialog(this, "La pelicula esta en proyección, restan " + tiempoRestante.getHoras() + " horas y " + tiempoRestante.getMinutos() + " minutos"+". ¿Desea quitar la proyección?", "Quitar proyección", JOptionPane.YES_NO_OPTION);
                if(opcion == JOptionPane.YES_OPTION){
                    // Anotar hora de final
                    salas[0][2].setHoraFinal(new Duracion());
                    // Enviar pelicula a historico
                    historico.add(salas[0][2]);
                    // Eliminar pelicula de la sala
                    salas[0][2] = null;
                    jButton3.setBackground(new Color(0, 153, 0));
                }
            }
        }
        // Actualizar tabla de historico
        actualizarTablaHistorico();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if(salas[0][3] == null){
            // indice 
            indice = 4;
            // Nueva ventana de Ingresar
            Ingresar ingresar = new Ingresar(this);
            ingresar.setVisible(true);
        }
        else{
            // Mostrar un jOptionPane de decisión, preguntar si desea quitar la proyección
            Duracion tiempoTranscurrido = new Duracion().resta(salas[0][3].getHoraInicial());
            Duracion tiempoRestante = salas[0][3].getDuracion().resta(tiempoTranscurrido);
            if(tiempoRestante.getHoras() <= 0 && tiempoRestante.getMinutos() <= 0){
                JOptionPane.showMessageDialog(this, "La pelicula ha terminado hace " + tiempoTranscurrido.getHoras() + " horas y " + tiempoTranscurrido.getMinutos() + " minutos");
                // Anotar hora de finalización
                salas[0][3].setHoraFinal(new Duracion());
                // Enviar pelicula a historico
                historico.add(salas[0][3]);
                // Eliminar pelicula de la sala
                salas[0][3] = null;
                jButton4.setBackground(new Color(0, 153, 0));
            }
            else{
                int opcion = JOptionPane.showConfirmDialog(this, "La pelicula esta en proyección, restan " + tiempoRestante.getHoras() + " horas y " + tiempoRestante.getMinutos() + " minutos"+". ¿Desea quitar la proyección?", "Quitar proyección", JOptionPane.YES_NO_OPTION);
                if(opcion == JOptionPane.YES_OPTION){
                    // Anotar hora de final
                    salas[0][3].setHoraFinal(new Duracion());
                    // Enviar pelicula a historico
                    historico.add(salas[0][3]);
                    // Eliminar pelicula de la sala
                    salas[0][3] = null;
                    jButton4.setBackground(new Color(0, 153, 0));
                }
            }
        }
        // Actualizar tabla de historico
        actualizarTablaHistorico();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if(salas[1][0] == null){
            // indice 
            indice = 5;
            // Nueva ventana de Ingresar
            Ingresar ingresar = new Ingresar(this);
            ingresar.setVisible(true);
        }
        else{
            // Mostrar un jOptionPane de decisión, preguntar si desea quitar la proyección
            Duracion tiempoTranscurrido = new Duracion().resta(salas[1][0].getHoraInicial());
            Duracion tiempoRestante = salas[1][0].getDuracion().resta(tiempoTranscurrido);
            if(tiempoRestante.getHoras() <= 0 && tiempoRestante.getMinutos() <= 0){
                JOptionPane.showMessageDialog(this, "La pelicula ha terminado hace " + tiempoTranscurrido.getHoras() + " horas y " + tiempoTranscurrido.getMinutos() + " minutos");
                // Anotar hora de finalización
                salas[1][0].setHoraFinal(new Duracion());
                // Enviar pelicula a historico
                historico.add(salas[1][0]);
                // Eliminar pelicula de la sala
                salas[1][0] = null;
                jButton5.setBackground(new Color(0, 153, 0));
            }
            else{
                int opcion = JOptionPane.showConfirmDialog(this, "La pelicula esta en proyección, restan " + tiempoRestante.getHoras() + " horas y " + tiempoRestante.getMinutos() + " minutos"+". ¿Desea quitar la proyección?", "Quitar proyección", JOptionPane.YES_NO_OPTION);
                if(opcion == JOptionPane.YES_OPTION){
                    // Anotar hora de final
                    salas[1][0].setHoraFinal(new Duracion());
                    // Enviar pelicula a historico
                    historico.add(salas[1][0]);
                    // Eliminar pelicula de la sala
                    salas[1][0] = null;
                    jButton5.setBackground(new Color(0, 153, 0));
                }
            }
        }
        // Actualizar tabla de historico
        actualizarTablaHistorico();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if(salas[1][1] == null){
            // indice 
            indice = 6;
            // Nueva ventana de Ingresar
            Ingresar ingresar = new Ingresar(this);
            ingresar.setVisible(true);
        }
        else{
            // Mostrar un jOptionPane de decisión, preguntar si desea quitar la proyección
            Duracion tiempoTranscurrido = new Duracion().resta(salas[1][1].getHoraInicial());
            Duracion tiempoRestante = salas[1][1].getDuracion().resta(tiempoTranscurrido);
            if(tiempoRestante.getHoras() <= 0 && tiempoRestante.getMinutos() <= 0){
                JOptionPane.showMessageDialog(this, "La pelicula ha terminado hace " + tiempoTranscurrido.getHoras() + " horas y " + tiempoTranscurrido.getMinutos() + " minutos");
                // Anotar hora de finalización
                salas[1][1].setHoraFinal(new Duracion());
                // Enviar pelicula a historico
                historico.add(salas[1][1]);
                // Eliminar pelicula de la sala
                salas[1][1] = null;
                jButton6.setBackground(new Color(0, 153, 0));
            }
            else{
                int opcion = JOptionPane.showConfirmDialog(this, "La pelicula esta en proyección, restan " + tiempoRestante.getHoras() + " horas y " + tiempoRestante.getMinutos() + " minutos"+". ¿Desea quitar la proyección?", "Quitar proyección", JOptionPane.YES_NO_OPTION);
                if(opcion == JOptionPane.YES_OPTION){
                    // Anotar hora de final
                    salas[1][1].setHoraFinal(new Duracion());
                    // Enviar pelicula a historico
                    historico.add(salas[1][1]);
                    // Eliminar pelicula de la sala
                    salas[1][1] = null;
                    jButton6.setBackground(new Color(0, 153, 0));
                }
            }
        }
        // Actualizar tabla de historico
        actualizarTablaHistorico();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if(salas[1][2] == null){
            // indice 
            indice = 7;
            // Nueva ventana de Ingresar
            Ingresar ingresar = new Ingresar(this);
            ingresar.setVisible(true);
        }
        else{
            // Mostrar un jOptionPane de decisión, preguntar si desea quitar la proyección
            Duracion tiempoTranscurrido = new Duracion().resta(salas[1][2].getHoraInicial());
            Duracion tiempoRestante = salas[1][2].getDuracion().resta(tiempoTranscurrido);
            if(tiempoRestante.getHoras() <= 0 && tiempoRestante.getMinutos() <= 0){
                JOptionPane.showMessageDialog(this, "La pelicula ha terminado hace " + tiempoTranscurrido.getHoras() + " horas y " + tiempoTranscurrido.getMinutos() + " minutos");
                // Anotar hora de finalización
                salas[1][2].setHoraFinal(new Duracion());
                // Enviar pelicula a historico
                historico.add(salas[1][2]);
                // Eliminar pelicula de la sala
                salas[1][2] = null;
                jButton7.setBackground(new Color(0, 153, 0));
            }
            else{
                int opcion = JOptionPane.showConfirmDialog(this, "La pelicula esta en proyección, restan " + tiempoRestante.getHoras() + " horas y " + tiempoRestante.getMinutos() + " minutos"+". ¿Desea quitar la proyección?", "Quitar proyección", JOptionPane.YES_NO_OPTION);
                if(opcion == JOptionPane.YES_OPTION){
                    // Anotar hora de final
                    salas[1][2].setHoraFinal(new Duracion());
                    // Enviar pelicula a historico
                    historico.add(salas[1][2]);
                    // Eliminar pelicula de la sala
                    salas[1][2] = null;
                    jButton7.setBackground(new Color(0, 153, 0));
                }
            }
        }
        // Actualizar tabla de historico
        actualizarTablaHistorico();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        if(salas[1][3] == null){
            // indice 
            indice = 8;
            // Nueva ventana de Ingresar
            Ingresar ingresar = new Ingresar(this);
            ingresar.setVisible(true);
        }
        else{
            // Mostrar un jOptionPane de decisión, preguntar si desea quitar la proyección
            Duracion tiempoTranscurrido = new Duracion().resta(salas[1][3].getHoraInicial());
            Duracion tiempoRestante = salas[1][3].getDuracion().resta(tiempoTranscurrido);
            if(tiempoRestante.getHoras() <= 0 && tiempoRestante.getMinutos() <= 0){
                JOptionPane.showMessageDialog(this, "La pelicula ha terminado hace " + tiempoTranscurrido.getHoras() + " horas y " + tiempoTranscurrido.getMinutos() + " minutos");
                // Anotar hora de finalización
                salas[1][3].setHoraFinal(new Duracion());
                // Enviar pelicula a historico
                historico.add(salas[1][3]);
                // Eliminar pelicula de la sala
                salas[1][3] = null;
                jButton8.setBackground(new Color(0, 153, 0));
            }
            else{
                int opcion = JOptionPane.showConfirmDialog(this, "La pelicula esta en proyección, restan " + tiempoRestante.getHoras() + " horas y " + tiempoRestante.getMinutos() + " minutos"+". ¿Desea quitar la proyección?", "Quitar proyección", JOptionPane.YES_NO_OPTION);
                if(opcion == JOptionPane.YES_OPTION){
                    // Anotar hora de final
                    salas[1][3].setHoraFinal(new Duracion());
                    // Enviar pelicula a historico
                    historico.add(salas[1][3]);
                    // Eliminar pelicula de la sala
                    salas[1][3] = null;
                    jButton8.setBackground(new Color(0, 153, 0));
                }
            }
        }
        // Actualizar tabla de historico
        actualizarTablaHistorico();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        if(salas[2][0] == null){
            // indice 
            indice = 9;
            // Nueva ventana de Ingresar
            Ingresar ingresar = new Ingresar(this);
            ingresar.setVisible(true);
        }
        else{
            // Mostrar un jOptionPane de decisión, preguntar si desea quitar la proyección
            Duracion tiempoTranscurrido = new Duracion().resta(salas[2][0].getHoraInicial());
            Duracion tiempoRestante = salas[2][0].getDuracion().resta(tiempoTranscurrido);
            if(tiempoRestante.getHoras() <= 0 && tiempoRestante.getMinutos() <= 0){
                JOptionPane.showMessageDialog(this, "La pelicula ha terminado hace " + tiempoTranscurrido.getHoras() + " horas y " + tiempoTranscurrido.getMinutos() + " minutos");
                // Anotar hora de finalización
                salas[2][0].setHoraFinal(new Duracion());
                // Enviar pelicula a historico
                historico.add(salas[2][0]);
                // Eliminar pelicula de la sala
                salas[2][0] = null;
                jButton9.setBackground(new Color(0, 153, 0));
            }
            else{
                int opcion = JOptionPane.showConfirmDialog(this, "La pelicula esta en proyección, restan " + tiempoRestante.getHoras() + " horas y " + tiempoRestante.getMinutos() + " minutos"+". ¿Desea quitar la proyección?", "Quitar proyección", JOptionPane.YES_NO_OPTION);
                if(opcion == JOptionPane.YES_OPTION){
                    // Anotar hora de final
                    salas[2][0].setHoraFinal(new Duracion());
                    // Enviar pelicula a historico
                    historico.add(salas[2][0]);
                    // Eliminar pelicula de la sala
                    salas[2][0] = null;
                    jButton9.setBackground(new Color(0, 153, 0));
                }
            }
        }
        // Actualizar tabla de historico
        actualizarTablaHistorico();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        if(salas[2][1] == null){
            // indice 
            indice = 10;
            // Nueva ventana de Ingresar
            Ingresar ingresar = new Ingresar(this);
            ingresar.setVisible(true);
        }
        else{
            // Mostrar un jOptionPane de decisión, preguntar si desea quitar la proyección
            Duracion tiempoTranscurrido = new Duracion().resta(salas[2][1].getHoraInicial());
            Duracion tiempoRestante = salas[2][1].getDuracion().resta(tiempoTranscurrido);
            if(tiempoRestante.getHoras() <= 0 && tiempoRestante.getMinutos() <= 0){
                JOptionPane.showMessageDialog(this, "La pelicula ha terminado hace " + tiempoTranscurrido.getHoras() + " horas y " + tiempoTranscurrido.getMinutos() + " minutos");
                // Anotar hora de finalización
                salas[2][1].setHoraFinal(new Duracion());
                // Enviar pelicula a historico
                historico.add(salas[2][1]);
                // Eliminar pelicula de la sala
                salas[2][1] = null;
                jButton10.setBackground(new Color(0, 153, 0));
            }
            else{
                int opcion = JOptionPane.showConfirmDialog(this, "La pelicula esta en proyección, restan " + tiempoRestante.getHoras() + " horas y " + tiempoRestante.getMinutos() + " minutos"+". ¿Desea quitar la proyección?", "Quitar proyección", JOptionPane.YES_NO_OPTION);
                if(opcion == JOptionPane.YES_OPTION){
                    // Anotar hora de final
                    salas[2][1].setHoraFinal(new Duracion());
                    // Enviar pelicula a historico
                    historico.add(salas[2][1]);
                    // Eliminar pelicula de la sala
                    salas[2][1] = null;
                    jButton10.setBackground(new Color(0, 153, 0));
                }
            }
        }
        // Actualizar tabla de historico
        actualizarTablaHistorico();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        if(salas[2][2] == null){
            // indice 
            indice = 11;
            // Nueva ventana de Ingresar
            Ingresar ingresar = new Ingresar(this);
            ingresar.setVisible(true);
        }
        else{
            // Mostrar un jOptionPane de decisión, preguntar si desea quitar la proyección
            Duracion tiempoTranscurrido = new Duracion().resta(salas[2][2].getHoraInicial());
            Duracion tiempoRestante = salas[2][2].getDuracion().resta(tiempoTranscurrido);
            if(tiempoRestante.getHoras() <= 0 && tiempoRestante.getMinutos() <= 0){
                JOptionPane.showMessageDialog(this, "La pelicula ha terminado hace " + tiempoTranscurrido.getHoras() + " horas y " + tiempoTranscurrido.getMinutos() + " minutos");
                // Anotar hora de finalización
                salas[2][2].setHoraFinal(new Duracion());
                // Enviar pelicula a historico
                historico.add(salas[2][2]);
                // Eliminar pelicula de la sala
                salas[2][2] = null;
                jButton11.setBackground(new Color(0, 153, 0));
            }
            else{
                int opcion = JOptionPane.showConfirmDialog(this, "La pelicula esta en proyección, restan " + tiempoRestante.getHoras() + " horas y " + tiempoRestante.getMinutos() + " minutos"+". ¿Desea quitar la proyección?", "Quitar proyección", JOptionPane.YES_NO_OPTION);
                if(opcion == JOptionPane.YES_OPTION){
                    // Anotar hora de final
                    salas[2][2].setHoraFinal(new Duracion());
                    // Enviar pelicula a historico
                    historico.add(salas[2][2]);
                    // Eliminar pelicula de la sala
                    salas[2][2] = null;
                    jButton11.setBackground(new Color(0, 153, 0));
                }
            }
        }
        // Actualizar tabla de historico
        actualizarTablaHistorico();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        if(salas[2][3] == null){
            // indice 
            indice = 12;
            // Nueva ventana de Ingresar
            Ingresar ingresar = new Ingresar(this);
            ingresar.setVisible(true);
        }
        else{
            // Mostrar un jOptionPane de decisión, preguntar si desea quitar la proyección
            Duracion tiempoTranscurrido = new Duracion().resta(salas[2][3].getHoraInicial());
            Duracion tiempoRestante = salas[2][3].getDuracion().resta(tiempoTranscurrido);
            if(tiempoRestante.getHoras() <= 0 && tiempoRestante.getMinutos() <= 0){
                JOptionPane.showMessageDialog(this, "La pelicula ha terminado hace " + tiempoTranscurrido.getHoras() + " horas y " + tiempoTranscurrido.getMinutos() + " minutos");
                // Anotar hora de finalización
                salas[2][3].setHoraFinal(new Duracion());
                // Enviar pelicula a historico
                historico.add(salas[2][3]);
                // Eliminar pelicula de la sala
                salas[2][3] = null;
                jButton12.setBackground(new Color(0, 153, 0));
            }
            else{
                int opcion = JOptionPane.showConfirmDialog(this, "La pelicula esta en proyección, restan " + tiempoRestante.getHoras() + " horas y " + tiempoRestante.getMinutos() + " minutos"+". ¿Desea quitar la proyección?", "Quitar proyección", JOptionPane.YES_NO_OPTION);
                if(opcion == JOptionPane.YES_OPTION){
                    // Anotar hora de final
                    salas[2][3].setHoraFinal(new Duracion());
                    // Enviar pelicula a historico
                    historico.add(salas[2][3]);
                    // Eliminar pelicula de la sala
                    salas[2][3] = null;
                    jButton12.setBackground(new Color(0, 153, 0));
                }
            }
        }
        // Actualizar tabla de historico
        actualizarTablaHistorico();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        if(salas[3][0] == null){
            // indice 
            indice = 13;
            // Nueva ventana de Ingresar
            Ingresar ingresar = new Ingresar(this);
            ingresar.setVisible(true);
        }
        else{
            // Mostrar un jOptionPane de decisión, preguntar si desea quitar la proyección
            Duracion tiempoTranscurrido = new Duracion().resta(salas[3][0].getHoraInicial());
            Duracion tiempoRestante = salas[3][0].getDuracion().resta(tiempoTranscurrido);
            if(tiempoRestante.getHoras() <= 0 && tiempoRestante.getMinutos() <= 0){
                JOptionPane.showMessageDialog(this, "La pelicula ha terminado hace " + tiempoTranscurrido.getHoras() + " horas y " + tiempoTranscurrido.getMinutos() + " minutos");
                // Anotar hora de finalización
                salas[3][0].setHoraFinal(new Duracion());
                // Enviar pelicula a historico
                historico.add(salas[3][0]);
                // Eliminar pelicula de la sala
                salas[3][0] = null;
                jButton13.setBackground(new Color(0, 153, 0));
            }
            else{
                int opcion = JOptionPane.showConfirmDialog(this, "La pelicula esta en proyección, restan " + tiempoRestante.getHoras() + " horas y " + tiempoRestante.getMinutos() + " minutos"+". ¿Desea quitar la proyección?", "Quitar proyección", JOptionPane.YES_NO_OPTION);
                if(opcion == JOptionPane.YES_OPTION){
                    // Anotar hora de final
                    salas[3][0].setHoraFinal(new Duracion());
                    // Enviar pelicula a historico
                    historico.add(salas[3][0]);
                    // Eliminar pelicula de la sala
                    salas[3][0] = null;
                    jButton13.setBackground(new Color(0, 153, 0));
                }
            }
        }
        // Actualizar tabla de historico
        actualizarTablaHistorico();
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        if(salas[3][1] == null){
            // indice 
            indice = 14;
            // Nueva ventana de Ingresar
            Ingresar ingresar = new Ingresar(this);
            ingresar.setVisible(true);
        }
        else{
            // Mostrar un jOptionPane de decisión, preguntar si desea quitar la proyección
            Duracion tiempoTranscurrido = new Duracion().resta(salas[3][1].getHoraInicial());
            Duracion tiempoRestante = salas[3][1].getDuracion().resta(tiempoTranscurrido);
            if(tiempoRestante.getHoras() <= 0 && tiempoRestante.getMinutos() <= 0){
                JOptionPane.showMessageDialog(this, "La pelicula ha terminado hace " + tiempoTranscurrido.getHoras() + " horas y " + tiempoTranscurrido.getMinutos() + " minutos");
                // Anotar hora de finalización
                salas[3][1].setHoraFinal(new Duracion());
                // Enviar pelicula a historico
                historico.add(salas[3][1]);
                // Eliminar pelicula de la sala
                salas[3][1] = null;
                jButton14.setBackground(new Color(0, 153, 0));
            }
            else{
                int opcion = JOptionPane.showConfirmDialog(this, "La pelicula esta en proyección, restan " + tiempoRestante.getHoras() + " horas y " + tiempoRestante.getMinutos() + " minutos"+". ¿Desea quitar la proyección?", "Quitar proyección", JOptionPane.YES_NO_OPTION);
                if(opcion == JOptionPane.YES_OPTION){
                    // Anotar hora de final
                    salas[3][1].setHoraFinal(new Duracion());
                    // Enviar pelicula a historico
                    historico.add(salas[3][1]);
                    // Eliminar pelicula de la sala
                    salas[3][1] = null;
                    jButton14.setBackground(new Color(0, 153, 0));
                }
            }
        }
        // Actualizar tabla de historico
        actualizarTablaHistorico();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        if(salas[3][2] == null){
            // indice 
            indice = 15;
            // Nueva ventana de Ingresar
            Ingresar ingresar = new Ingresar(this);
            ingresar.setVisible(true);
        }
        else{
            // Mostrar un jOptionPane de decisión, preguntar si desea quitar la proyección
            Duracion tiempoTranscurrido = new Duracion().resta(salas[3][2].getHoraInicial());
            Duracion tiempoRestante = salas[3][2].getDuracion().resta(tiempoTranscurrido);
            if(tiempoRestante.getHoras() <= 0 && tiempoRestante.getMinutos() <= 0){
                JOptionPane.showMessageDialog(this, "La pelicula ha terminado hace " + tiempoTranscurrido.getHoras() + " horas y " + tiempoTranscurrido.getMinutos() + " minutos");
                // Anotar hora de finalización
                salas[3][2].setHoraFinal(new Duracion());
                // Enviar pelicula a historico
                historico.add(salas[3][2]);
                // Eliminar pelicula de la sala
                salas[3][2] = null;
                jButton15.setBackground(new Color(0, 153, 0));
            }
            else{
                int opcion = JOptionPane.showConfirmDialog(this, "La pelicula esta en proyección, restan " + tiempoRestante.getHoras() + " horas y " + tiempoRestante.getMinutos() + " minutos"+". ¿Desea quitar la proyección?", "Quitar proyección", JOptionPane.YES_NO_OPTION);
                if(opcion == JOptionPane.YES_OPTION){
                    // Anotar hora de final
                    salas[3][2].setHoraFinal(new Duracion());
                    // Enviar pelicula a historico
                    historico.add(salas[3][2]);
                    // Eliminar pelicula de la sala
                    salas[3][2] = null;
                    jButton15.setBackground(new Color(0, 153, 0));
                }
            }
        }
        // Actualizar tabla de historico
        actualizarTablaHistorico();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        if(salas[3][3] == null){
            // indice 
            indice = 16;
            // Nueva ventana de Ingresar
            Ingresar ingresar = new Ingresar(this);
            ingresar.setVisible(true);
        }
        else{
            // Mostrar un jOptionPane de decisión, preguntar si desea quitar la proyección
            Duracion tiempoTranscurrido = new Duracion().resta(salas[3][3].getHoraInicial());
            Duracion tiempoRestante = salas[3][3].getDuracion().resta(tiempoTranscurrido);
            if(tiempoRestante.getHoras() <= 0 && tiempoRestante.getMinutos() <= 0){
                JOptionPane.showMessageDialog(this, "La pelicula ha terminado hace " + tiempoTranscurrido.getHoras() + " horas y " + tiempoTranscurrido.getMinutos() + " minutos");
                // Anotar hora de finalización
                salas[3][3].setHoraFinal(new Duracion());
                // Enviar pelicula a historico
                historico.add(salas[3][3]);
                // Eliminar pelicula de la sala
                salas[3][3] = null;
                jButton16.setBackground(new Color(0, 153, 0));
            }
            else{
                int opcion = JOptionPane.showConfirmDialog(this, "La pelicula esta en proyección, restan " + tiempoRestante.getHoras() + " horas y " + tiempoRestante.getMinutos() + " minutos"+". ¿Desea quitar la proyección?", "Quitar proyección", JOptionPane.YES_NO_OPTION);
                if(opcion == JOptionPane.YES_OPTION){
                    // Anotar hora de final
                    salas[3][3].setHoraFinal(new Duracion());
                    // Enviar pelicula a historico
                    historico.add(salas[3][3]);
                    // Eliminar pelicula de la sala
                    salas[3][3] = null;
                    jButton16.setBackground(new Color(0, 153, 0));
                }
            }
        }
        // Actualizar tabla de historico
        actualizarTablaHistorico();
    }//GEN-LAST:event_jButton16ActionPerformed

    void actualizarTablaHistorico(){
        // indice, titulo, categoria, duracion, Tiempo emicion
        // Columnas de la tabla
        String[] columnas = {"Indice", "Titulo", "Categoria", "Duracion", "Tiempo emicion"};
        // Filas de la tabla
        String[][] filas = new String[historico.size()][6];
        // Recorrer historico
        for(int i = 0; i < historico.size(); i++){
            // Obtener pelicula
            Pelicula pelicula = historico.get(i);
            // Obtener datos de la pelicula
            String indice = String.valueOf(i);
            String titulo = pelicula.getTitulo();
            String categoria = pelicula.getCategoria();
            String duracion = String.valueOf(pelicula.getDuracion());
            String tiempoEmision = String.valueOf(pelicula.getHoraFinal().resta(pelicula.getHoraInicial()));
            // Agregar datos a la fila
            filas[i] = new String[]{indice, titulo, categoria, duracion, tiempoEmision};
        }
        // Actualizar tabla
        jTable1.setModel(new javax.swing.table.DefaultTableModel(filas, columnas));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
