package Punto2_JD_MH;

import java.util.ArrayList;

import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author User
 */
public class Tabla extends javax.swing.JFrame {

    // Lista de personas
    private ArrayList<Persona> personas;

    /**
     * Creates new form Tabla
     */
    public Tabla() {
        // Inicializamos la lista de personas
        personas = new ArrayList<Persona>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPrincipal = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnRegistrar = new javax.swing.JButton();
        btnConsultar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblPrincipal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblPrincipal);

        jLabel1.setText("Personas");

        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnRegistrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnConsultar, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRegistrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConsultar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Actualiza la tabla
    private void actualizarTabla() {
        // Encabezados
        String [] e = {"Nombre", "Altura", "Género"};
        // Datos
        Object [][] d = new Object[personas.size()][3];
        // Recorremos la lista de personas
        for (int i = 0; i < personas.size(); i++) {
            // Obtenemos la persona
            Persona p = personas.get(i);
            // Agregamos los datos
            d[i][0] = p.getNombre();
            d[i][1] = p.getAltura();
            d[i][2] = p.getGenero();
        }

        // Actualizamos la tabla
        tblPrincipal.setModel(new javax.swing.table.DefaultTableModel(
            d,
            e
        ));        
    }


    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        
        // Registramos a una persona
        String nombre = JOptionPane.showInputDialog("Ingrese el nombre");
        // Validamos que el nombre no sea nulo
        if (nombre != null) {
            // Obtenemos la altura
            String altura = JOptionPane.showInputDialog("Ingrese la altura");
            // Validamos que la altura no sea nula
            if (altura != null) {
                // Validar que sea un número
                try {
                    // Convertimos la altura a double
                    double alturaD = Double.parseDouble(altura);
                    // Obtenemos el género
                    String genero = JOptionPane.showInputDialog("Ingrese el género H/M");
                    // Validamos que el género no sea nulo
                    if (genero != null) {
                        // Validamos que sea H o M
                        if (genero.equals("H") || genero.equals("M")) {
                            // Creamos la persona
                            Persona p = new Persona(nombre, alturaD, genero);
                            // Agregamos la persona a la lista
                            personas.add(p);
                            // Actualizamos la tabla
                            actualizarTabla();
                        } else {
                            JOptionPane.showMessageDialog(this, "El género debe ser H o M");
                            return;
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "El género no puede ser nulo");
                        return;
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "La altura debe ser un número");
                    return;
                }
            } else {
                JOptionPane.showMessageDialog(this, "La altura no puede ser nula");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, "El nombre no puede ser nulo");
            return;
        }

        // Actualizamos la tabla
        actualizarTabla();
        
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        // Mostrar cual es la mujer mas alta y el hombre mas bajo
        // Obtenemos la persona mujer mas alta
        Persona mujerMasAlta = null;

        // Recorremos la lista de personas
        for (int i = 0; i < personas.size(); i++) {
            // Obtenemos la persona
            Persona p = personas.get(i);
            // Validamos que sea mujer
            if (p.getGenero().equals("M")) {
                // Validamos que sea la primera mujer
                if (mujerMasAlta == null) {
                    // La guardamos
                    mujerMasAlta = p;
                } else {
                    // Validamos que sea mayor
                    if (p.getAltura() > mujerMasAlta.getAltura()) {
                        // La guardamos
                        mujerMasAlta = p;
                    }
                }
            }
        }

        // Obtenemos la persona hombre mas bajo
        Persona hombreMasBajo = null;

        // Recorremos la lista de personas
        for (int i = 0; i < personas.size(); i++) {
            // Obtenemos la persona
            Persona p = personas.get(i);
            // Validamos que sea hombre
            if (p.getGenero().equals("H")) {
                // Validamos que sea el primero hombre
                if (hombreMasBajo == null) {
                    // La guardamos
                    hombreMasBajo = p;
                } else {
                    // Validamos que sea menor
                    if (p.getAltura() < hombreMasBajo.getAltura()) {
                        // La guardamos
                        hombreMasBajo = p;
                    }
                }
            }
        }

        // Mostramos el resultado
        JOptionPane.showMessageDialog(this, "La mujer mas alta es " + mujerMasAlta.getNombre() + " con una altura de " + mujerMasAlta.getAltura());
        JOptionPane.showMessageDialog(this, "El hombre mas bajo es " + hombreMasBajo.getNombre() + " con una altura de " + hombreMasBajo.getAltura());

        


    }//GEN-LAST:event_btnConsultarActionPerformed    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPrincipal;
    // End of variables declaration//GEN-END:variables
}
